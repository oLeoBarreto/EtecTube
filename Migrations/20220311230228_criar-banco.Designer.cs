// <auto-generated />
using System;
using EtecTube.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EtecTube.Migrations
{
    [DbContext(typeof(Contexto))]
    [Migration("20220311230228_criar-banco")]
    partial class criarbanco
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.15");

            modelBuilder.Entity("EtecTube.Models.Channel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ChannelPicture")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Channel");

                    b.HasData(
                        new
                        {
                            Id = new Guid("50d782a4-e0bd-4b41-8f48-6cb294793f8a"),
                            ChannelPicture = "~/img/Channels/piologo.jpg",
                            Name = "Irmãos Piologo",
                            UserId = "b12d85ea-5a1d-4a45-b89e-bebebeeddf31"
                        },
                        new
                        {
                            Id = new Guid("05a816f7-b1d9-45d4-a34c-784075ab365e"),
                            ChannelPicture = "~/img/Channels/melodicka.jpg",
                            Name = "Melodicka Bros",
                            UserId = "b12d85ea-5a1d-4a45-b89e-bebebeeddf31"
                        },
                        new
                        {
                            Id = new Guid("f977bcee-42df-4b6c-91a9-bdf3da992d0f"),
                            ChannelPicture = "~/img/Channels/frogleapstudios.jpg",
                            Name = "Frog Leap Studios",
                            UserId = "b12d85ea-5a1d-4a45-b89e-bebebeeddf31"
                        },
                        new
                        {
                            Id = new Guid("ec728374-badd-419a-8384-6c3a1ef5fd94"),
                            ChannelPicture = "~/img/Channels/99coders.jpg",
                            Name = "99 Coders",
                            UserId = "b12d85ea-5a1d-4a45-b89e-bebebeeddf31"
                        },
                        new
                        {
                            Id = new Guid("ffdf91f9-2284-4580-85d2-4616f12633d2"),
                            ChannelPicture = "~/img/Channels/balta.jpg",
                            Name = "Balta.IO",
                            UserId = "b12d85ea-5a1d-4a45-b89e-bebebeeddf31"
                        });
                });

            modelBuilder.Entity("EtecTube.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nickname")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("longblob");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int>("UserNameChangeLimit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = "b12d85ea-5a1d-4a45-b89e-bebebeeddf31",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9c61bdbd-4802-4a86-8291-b976b2eae4ae",
                            Email = "admin@etectube.com.br",
                            EmailConfirmed = true,
                            FullName = "Leonardo de Souza Barreto",
                            LockoutEnabled = false,
                            Nickname = "Leo",
                            NormalizedEmail = "ADMIN@ETECTUBE.COM.BR",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEMufpH1N3SlmJKF9edKnlVw7A2ACv3x9U+baJeAAj5NXKAJBCuFw0iinn0GRB2NZ7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "49282936",
                            TwoFactorEnabled = false,
                            UserName = "Admin",
                            UserNameChangeLimit = 10
                        });
                });

            modelBuilder.Entity("EtecTube.Models.Video", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasMaxLength(8000)
                        .HasColumnType("varchar(8000)");

                    b.Property<uint>("Dislikes")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("Likes")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Thumbnail")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<uint>("Visualizations")
                        .HasColumnType("int unsigned");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.ToTable("Video");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1cd871d8-3d2c-46c6-b9f1-9f68c1dfa4d7"),
                            ChannelId = new Guid("50d782a4-e0bd-4b41-8f48-6cb294793f8a"),
                            Description = "VALE A PENA VER DE NOVO! Com mais de 17 milhões de views desde sua criação em 2004, este clássico da internet brasileira aparece pela primeira vez em FULL HD. É bom relembrar esse clássico, pois nesse ano de comemoração de 10 anos, vai rolar também a esperada Avaiana de Pau 2!!! Fiquem ligados!",
                            Dislikes = 0u,
                            Likes = 79000u,
                            Name = "Avaiana de Pau Edição de 10 anos em FULL HD!",
                            PublishedDate = new DateTime(2014, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Thumbnail = "~/img/Videos/avaiana_pau.png",
                            Visualizations = 2354441u
                        },
                        new
                        {
                            Id = new Guid("7d090b7d-2af9-4934-9279-5a2cebc9cd94"),
                            ChannelId = new Guid("50d782a4-e0bd-4b41-8f48-6cb294793f8a"),
                            Description = "Chegou a novidade que as Menines esperavam, a Avaiane de Plume, porem será que ela é tão eficaz quanto a original de Pau?",
                            Dislikes = 0u,
                            Likes = 65000u,
                            Name = "Avaiane de Plume - A Avaiane dos Mimimi",
                            PublishedDate = new DateTime(2021, 3, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Thumbnail = "~/img/Videos/avaiana_plume.png",
                            Visualizations = 498251u
                        },
                        new
                        {
                            Id = new Guid("ab60bafc-6501-45f8-9b1e-958bbab788ce"),
                            ChannelId = new Guid("05a816f7-b1d9-45d4-a34c-784075ab365e"),
                            Description = "Let's start the year with an acoustic cover of the new song Zombified by @Falling In Reverse.",
                            Dislikes = 0u,
                            Likes = 2300u,
                            Name = "Falling In Reverse - ZOMBIFIED (Acoustic Cover)",
                            PublishedDate = new DateTime(2022, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Thumbnail = "~/img/Videos/falling_reverse.png",
                            Visualizations = 25759u
                        },
                        new
                        {
                            Id = new Guid("a53934d1-266e-42f6-b688-27f5571cde2b"),
                            ChannelId = new Guid("05a816f7-b1d9-45d4-a34c-784075ab365e"),
                            Description = "What if John Denver came from a different universe to bring us some electro cyberpunk industrial synthwave sci-fi futuristic metal vibes?",
                            Dislikes = 0u,
                            Likes = 85000u,
                            Name = "Country Roads but it's CYBERPUNK/INDUSTRIAL/SCI-FI wtf",
                            PublishedDate = new DateTime(2019, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Thumbnail = "~/img/Videos/country_roads.png",
                            Visualizations = 1284517u
                        },
                        new
                        {
                            Id = new Guid("cd39a371-8213-48d9-abac-3707e5df64b5"),
                            ChannelId = new Guid("f977bcee-42df-4b6c-91a9-bdf3da992d0f"),
                            Description = "Hi there, my name is Leo and run a studio on the westside of Norway where I do music and video stuff for youtube. I also have a band called Frog Leap, where we do my metal covers live. For my covers I play everything myself as well as record, mix, master, shoot and edit the music & videos.",
                            Dislikes = 0u,
                            Likes = 101000u,
                            Name = "What Is Love (metal cover by Leo Moracchioli feat. Priscila Serrano)",
                            PublishedDate = new DateTime(2021, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Thumbnail = "~/img/Videos/what_is_love.png",
                            Visualizations = 2810254u
                        },
                        new
                        {
                            Id = new Guid("566060d5-dda9-4c96-bffa-f1cb7c01fe1e"),
                            ChannelId = new Guid("f977bcee-42df-4b6c-91a9-bdf3da992d0f"),
                            Description = "Hi there, my name is Leo and run a studio on the westside of Norway where I do music and video stuff for youtube. I also have a band called Frog Leap, where we do my metal covers live. For my covers I play everything myself as well as record, mix, master, shoot and edit the music & videos.",
                            Dislikes = 0u,
                            Likes = 102000u,
                            Name = "Carry On Wayward Son (metal cover by Leo Moracchioli feat. Truls Haugen)",
                            PublishedDate = new DateTime(2020, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Thumbnail = "~/img/Videos/carry_on_wayward_son.png",
                            Visualizations = 4725330u
                        },
                        new
                        {
                            Id = new Guid("c7214694-18c8-4ca4-8773-9350b578a9a4"),
                            ChannelId = new Guid("ec728374-badd-419a-8384-6c3a1ef5fd94"),
                            Description = "O que acha de criarmos uma aplicação completa juntos passo a passo? É um app para compras em supermercado. Acompanhe a série de vídeos.",
                            Dislikes = 0u,
                            Likes = 186u,
                            Name = "Criando um app para compras de supermercado #07 - Finalizando o layout do app",
                            PublishedDate = new DateTime(2022, 2, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Thumbnail = "~/img/Videos/app_delphi.png",
                            Visualizations = 1013u
                        },
                        new
                        {
                            Id = new Guid("92585681-6c8c-498f-8552-f8b816c73a7d"),
                            ChannelId = new Guid("ffdf91f9-2284-4580-85d2-4616f12633d2"),
                            Description = "String, string ou StringBuilder? Para que servem e quando devemos utilizar cada um destes tipos no C#!",
                            Dislikes = 0u,
                            Likes = 257u,
                            Name = "var, string, System.String e StringBuilder no C# | por André Baltieri #balta",
                            PublishedDate = new DateTime(2022, 2, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Thumbnail = "~/img/Videos/balta_string.png",
                            Visualizations = 1726u
                        },
                        new
                        {
                            Id = new Guid("7a4a3fa3-bc11-4f67-9920-64f645952079"),
                            ChannelId = new Guid("ffdf91f9-2284-4580-85d2-4616f12633d2"),
                            Description = "Participe do balta.io Experience, um evento online, ao vivo e gratuito que vai reunir grandes nomes da internet em uma experiência única! https://balta.io/experience",
                            Dislikes = 0u,
                            Likes = 1000u,
                            Name = "C# 10 e .NET 6 - Novidades na manipulação de listas | por André Baltieri #balta",
                            PublishedDate = new DateTime(2021, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Thumbnail = "~/img/Videos/balta_c10.png",
                            Visualizations = 8473u
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = "b12d85ea-5a1d-4a45-b89e-bebebeeddf31",
                            ConcurrencyStamp = "439fd587-c06d-4e48-b067-87b24165a637",
                            Name = "Administrador",
                            NormalizedName = "ADMINISTRADOR"
                        },
                        new
                        {
                            Id = "916b457d-ccc3-4832-b31c-3792aa10e3e2",
                            ConcurrencyStamp = "f55e4180-7050-45cd-abfd-ca0cc700ed0c",
                            Name = "Moderador",
                            NormalizedName = "MODERADOR"
                        },
                        new
                        {
                            Id = "ab8868c8-8a8d-40d2-8981-96074633d86f",
                            ConcurrencyStamp = "75ffccd0-80d9-4880-9c59-34b659d4c04f",
                            Name = "Usuario",
                            NormalizedName = "USUARIO"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "b12d85ea-5a1d-4a45-b89e-bebebeeddf31",
                            RoleId = "b12d85ea-5a1d-4a45-b89e-bebebeeddf31"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("EtecTube.Models.Channel", b =>
                {
                    b.HasOne("EtecTube.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EtecTube.Models.Video", b =>
                {
                    b.HasOne("EtecTube.Models.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EtecTube.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EtecTube.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EtecTube.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EtecTube.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
